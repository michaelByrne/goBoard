// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"goBoard/internal/core/domain"
	"goBoard/internal/core/ports"
	"sync"
)

// Ensure, that MemberRepoMock does implement ports.MemberRepo.
// If this is not the case, regenerate this file with moq.
var _ ports.MemberRepo = &MemberRepoMock{}

// MemberRepoMock is a mock implementation of ports.MemberRepo.
//
//	func TestSomethingThatUsesMemberRepo(t *testing.T) {
//
//		// make and configure a mocked ports.MemberRepo
//		mockedMemberRepo := &MemberRepoMock{
//			GetAllPrefsFunc: func(ctx context.Context) ([]domain.Pref, error) {
//				panic("mock out the GetAllPrefs method")
//			},
//			GetMemberByIDFunc: func(id int) (*domain.Member, error) {
//				panic("mock out the GetMemberByID method")
//			},
//			GetMemberByUsernameFunc: func(username string) (*domain.Member, error) {
//				panic("mock out the GetMemberByUsername method")
//			},
//			GetMemberIDByUsernameFunc: func(username string) (int, error) {
//				panic("mock out the GetMemberIDByUsername method")
//			},
//			GetMemberPrefsFunc: func(memberID int) (*domain.MemberPrefs, error) {
//				panic("mock out the GetMemberPrefs method")
//			},
//			SaveMemberFunc: func(member domain.Member) (int, error) {
//				panic("mock out the SaveMember method")
//			},
//			UpdateMemberFunc: func(ctx context.Context, member domain.Member) error {
//				panic("mock out the UpdateMember method")
//			},
//			UpdatePrefsFunc: func(ctx context.Context, memberID int, updatedPrefs domain.MemberPrefs) error {
//				panic("mock out the UpdatePrefs method")
//			},
//		}
//
//		// use mockedMemberRepo in code that requires ports.MemberRepo
//		// and then make assertions.
//
//	}
type MemberRepoMock struct {
	// GetAllPrefsFunc mocks the GetAllPrefs method.
	GetAllPrefsFunc func(ctx context.Context) ([]domain.Pref, error)

	// GetMemberByIDFunc mocks the GetMemberByID method.
	GetMemberByIDFunc func(id int) (*domain.Member, error)

	// GetMemberByUsernameFunc mocks the GetMemberByUsername method.
	GetMemberByUsernameFunc func(username string) (*domain.Member, error)

	// GetMemberIDByUsernameFunc mocks the GetMemberIDByUsername method.
	GetMemberIDByUsernameFunc func(username string) (int, error)

	// GetMemberPrefsFunc mocks the GetMemberPrefs method.
	GetMemberPrefsFunc func(memberID int) (*domain.MemberPrefs, error)

	// SaveMemberFunc mocks the SaveMember method.
	SaveMemberFunc func(member domain.Member) (int, error)

	// UpdateMemberFunc mocks the UpdateMember method.
	UpdateMemberFunc func(ctx context.Context, member domain.Member) error

	// UpdatePrefsFunc mocks the UpdatePrefs method.
	UpdatePrefsFunc func(ctx context.Context, memberID int, updatedPrefs domain.MemberPrefs) error

	// calls tracks calls to the methods.
	calls struct {
		// GetAllPrefs holds details about calls to the GetAllPrefs method.
		GetAllPrefs []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetMemberByID holds details about calls to the GetMemberByID method.
		GetMemberByID []struct {
			// ID is the id argument value.
			ID int
		}
		// GetMemberByUsername holds details about calls to the GetMemberByUsername method.
		GetMemberByUsername []struct {
			// Username is the username argument value.
			Username string
		}
		// GetMemberIDByUsername holds details about calls to the GetMemberIDByUsername method.
		GetMemberIDByUsername []struct {
			// Username is the username argument value.
			Username string
		}
		// GetMemberPrefs holds details about calls to the GetMemberPrefs method.
		GetMemberPrefs []struct {
			// MemberID is the memberID argument value.
			MemberID int
		}
		// SaveMember holds details about calls to the SaveMember method.
		SaveMember []struct {
			// Member is the member argument value.
			Member domain.Member
		}
		// UpdateMember holds details about calls to the UpdateMember method.
		UpdateMember []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Member is the member argument value.
			Member domain.Member
		}
		// UpdatePrefs holds details about calls to the UpdatePrefs method.
		UpdatePrefs []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MemberID is the memberID argument value.
			MemberID int
			// UpdatedPrefs is the updatedPrefs argument value.
			UpdatedPrefs domain.MemberPrefs
		}
	}
	lockGetAllPrefs           sync.RWMutex
	lockGetMemberByID         sync.RWMutex
	lockGetMemberByUsername   sync.RWMutex
	lockGetMemberIDByUsername sync.RWMutex
	lockGetMemberPrefs        sync.RWMutex
	lockSaveMember            sync.RWMutex
	lockUpdateMember          sync.RWMutex
	lockUpdatePrefs           sync.RWMutex
}

// GetAllPrefs calls GetAllPrefsFunc.
func (mock *MemberRepoMock) GetAllPrefs(ctx context.Context) ([]domain.Pref, error) {
	if mock.GetAllPrefsFunc == nil {
		panic("MemberRepoMock.GetAllPrefsFunc: method is nil but MemberRepo.GetAllPrefs was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetAllPrefs.Lock()
	mock.calls.GetAllPrefs = append(mock.calls.GetAllPrefs, callInfo)
	mock.lockGetAllPrefs.Unlock()
	return mock.GetAllPrefsFunc(ctx)
}

// GetAllPrefsCalls gets all the calls that were made to GetAllPrefs.
// Check the length with:
//
//	len(mockedMemberRepo.GetAllPrefsCalls())
func (mock *MemberRepoMock) GetAllPrefsCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetAllPrefs.RLock()
	calls = mock.calls.GetAllPrefs
	mock.lockGetAllPrefs.RUnlock()
	return calls
}

// GetMemberByID calls GetMemberByIDFunc.
func (mock *MemberRepoMock) GetMemberByID(id int) (*domain.Member, error) {
	if mock.GetMemberByIDFunc == nil {
		panic("MemberRepoMock.GetMemberByIDFunc: method is nil but MemberRepo.GetMemberByID was just called")
	}
	callInfo := struct {
		ID int
	}{
		ID: id,
	}
	mock.lockGetMemberByID.Lock()
	mock.calls.GetMemberByID = append(mock.calls.GetMemberByID, callInfo)
	mock.lockGetMemberByID.Unlock()
	return mock.GetMemberByIDFunc(id)
}

// GetMemberByIDCalls gets all the calls that were made to GetMemberByID.
// Check the length with:
//
//	len(mockedMemberRepo.GetMemberByIDCalls())
func (mock *MemberRepoMock) GetMemberByIDCalls() []struct {
	ID int
} {
	var calls []struct {
		ID int
	}
	mock.lockGetMemberByID.RLock()
	calls = mock.calls.GetMemberByID
	mock.lockGetMemberByID.RUnlock()
	return calls
}

// GetMemberByUsername calls GetMemberByUsernameFunc.
func (mock *MemberRepoMock) GetMemberByUsername(username string) (*domain.Member, error) {
	if mock.GetMemberByUsernameFunc == nil {
		panic("MemberRepoMock.GetMemberByUsernameFunc: method is nil but MemberRepo.GetMemberByUsername was just called")
	}
	callInfo := struct {
		Username string
	}{
		Username: username,
	}
	mock.lockGetMemberByUsername.Lock()
	mock.calls.GetMemberByUsername = append(mock.calls.GetMemberByUsername, callInfo)
	mock.lockGetMemberByUsername.Unlock()
	return mock.GetMemberByUsernameFunc(username)
}

// GetMemberByUsernameCalls gets all the calls that were made to GetMemberByUsername.
// Check the length with:
//
//	len(mockedMemberRepo.GetMemberByUsernameCalls())
func (mock *MemberRepoMock) GetMemberByUsernameCalls() []struct {
	Username string
} {
	var calls []struct {
		Username string
	}
	mock.lockGetMemberByUsername.RLock()
	calls = mock.calls.GetMemberByUsername
	mock.lockGetMemberByUsername.RUnlock()
	return calls
}

// GetMemberIDByUsername calls GetMemberIDByUsernameFunc.
func (mock *MemberRepoMock) GetMemberIDByUsername(username string) (int, error) {
	if mock.GetMemberIDByUsernameFunc == nil {
		panic("MemberRepoMock.GetMemberIDByUsernameFunc: method is nil but MemberRepo.GetMemberIDByUsername was just called")
	}
	callInfo := struct {
		Username string
	}{
		Username: username,
	}
	mock.lockGetMemberIDByUsername.Lock()
	mock.calls.GetMemberIDByUsername = append(mock.calls.GetMemberIDByUsername, callInfo)
	mock.lockGetMemberIDByUsername.Unlock()
	return mock.GetMemberIDByUsernameFunc(username)
}

// GetMemberIDByUsernameCalls gets all the calls that were made to GetMemberIDByUsername.
// Check the length with:
//
//	len(mockedMemberRepo.GetMemberIDByUsernameCalls())
func (mock *MemberRepoMock) GetMemberIDByUsernameCalls() []struct {
	Username string
} {
	var calls []struct {
		Username string
	}
	mock.lockGetMemberIDByUsername.RLock()
	calls = mock.calls.GetMemberIDByUsername
	mock.lockGetMemberIDByUsername.RUnlock()
	return calls
}

// GetMemberPrefs calls GetMemberPrefsFunc.
func (mock *MemberRepoMock) GetMemberPrefs(memberID int) (*domain.MemberPrefs, error) {
	if mock.GetMemberPrefsFunc == nil {
		panic("MemberRepoMock.GetMemberPrefsFunc: method is nil but MemberRepo.GetMemberPrefs was just called")
	}
	callInfo := struct {
		MemberID int
	}{
		MemberID: memberID,
	}
	mock.lockGetMemberPrefs.Lock()
	mock.calls.GetMemberPrefs = append(mock.calls.GetMemberPrefs, callInfo)
	mock.lockGetMemberPrefs.Unlock()
	return mock.GetMemberPrefsFunc(memberID)
}

// GetMemberPrefsCalls gets all the calls that were made to GetMemberPrefs.
// Check the length with:
//
//	len(mockedMemberRepo.GetMemberPrefsCalls())
func (mock *MemberRepoMock) GetMemberPrefsCalls() []struct {
	MemberID int
} {
	var calls []struct {
		MemberID int
	}
	mock.lockGetMemberPrefs.RLock()
	calls = mock.calls.GetMemberPrefs
	mock.lockGetMemberPrefs.RUnlock()
	return calls
}

// SaveMember calls SaveMemberFunc.
func (mock *MemberRepoMock) SaveMember(member domain.Member) (int, error) {
	if mock.SaveMemberFunc == nil {
		panic("MemberRepoMock.SaveMemberFunc: method is nil but MemberRepo.SaveMember was just called")
	}
	callInfo := struct {
		Member domain.Member
	}{
		Member: member,
	}
	mock.lockSaveMember.Lock()
	mock.calls.SaveMember = append(mock.calls.SaveMember, callInfo)
	mock.lockSaveMember.Unlock()
	return mock.SaveMemberFunc(member)
}

// SaveMemberCalls gets all the calls that were made to SaveMember.
// Check the length with:
//
//	len(mockedMemberRepo.SaveMemberCalls())
func (mock *MemberRepoMock) SaveMemberCalls() []struct {
	Member domain.Member
} {
	var calls []struct {
		Member domain.Member
	}
	mock.lockSaveMember.RLock()
	calls = mock.calls.SaveMember
	mock.lockSaveMember.RUnlock()
	return calls
}

// UpdateMember calls UpdateMemberFunc.
func (mock *MemberRepoMock) UpdateMember(ctx context.Context, member domain.Member) error {
	if mock.UpdateMemberFunc == nil {
		panic("MemberRepoMock.UpdateMemberFunc: method is nil but MemberRepo.UpdateMember was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Member domain.Member
	}{
		Ctx:    ctx,
		Member: member,
	}
	mock.lockUpdateMember.Lock()
	mock.calls.UpdateMember = append(mock.calls.UpdateMember, callInfo)
	mock.lockUpdateMember.Unlock()
	return mock.UpdateMemberFunc(ctx, member)
}

// UpdateMemberCalls gets all the calls that were made to UpdateMember.
// Check the length with:
//
//	len(mockedMemberRepo.UpdateMemberCalls())
func (mock *MemberRepoMock) UpdateMemberCalls() []struct {
	Ctx    context.Context
	Member domain.Member
} {
	var calls []struct {
		Ctx    context.Context
		Member domain.Member
	}
	mock.lockUpdateMember.RLock()
	calls = mock.calls.UpdateMember
	mock.lockUpdateMember.RUnlock()
	return calls
}

// UpdatePrefs calls UpdatePrefsFunc.
func (mock *MemberRepoMock) UpdatePrefs(ctx context.Context, memberID int, updatedPrefs domain.MemberPrefs) error {
	if mock.UpdatePrefsFunc == nil {
		panic("MemberRepoMock.UpdatePrefsFunc: method is nil but MemberRepo.UpdatePrefs was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		MemberID     int
		UpdatedPrefs domain.MemberPrefs
	}{
		Ctx:          ctx,
		MemberID:     memberID,
		UpdatedPrefs: updatedPrefs,
	}
	mock.lockUpdatePrefs.Lock()
	mock.calls.UpdatePrefs = append(mock.calls.UpdatePrefs, callInfo)
	mock.lockUpdatePrefs.Unlock()
	return mock.UpdatePrefsFunc(ctx, memberID, updatedPrefs)
}

// UpdatePrefsCalls gets all the calls that were made to UpdatePrefs.
// Check the length with:
//
//	len(mockedMemberRepo.UpdatePrefsCalls())
func (mock *MemberRepoMock) UpdatePrefsCalls() []struct {
	Ctx          context.Context
	MemberID     int
	UpdatedPrefs domain.MemberPrefs
} {
	var calls []struct {
		Ctx          context.Context
		MemberID     int
		UpdatedPrefs domain.MemberPrefs
	}
	mock.lockUpdatePrefs.RLock()
	calls = mock.calls.UpdatePrefs
	mock.lockUpdatePrefs.RUnlock()
	return calls
}
