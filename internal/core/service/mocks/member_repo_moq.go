// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"goBoard/internal/core/domain"
	"goBoard/internal/core/ports"
	"sync"
)

// Ensure, that MemberRepoMock does implement ports.MemberRepo.
// If this is not the case, regenerate this file with moq.
var _ ports.MemberRepo = &MemberRepoMock{}

// MemberRepoMock is a mock implementation of ports.MemberRepo.
//
//	func TestSomethingThatUsesMemberRepo(t *testing.T) {
//
//		// make and configure a mocked ports.MemberRepo
//		mockedMemberRepo := &MemberRepoMock{
//			GetMemberByIDFunc: func(id int) (*domain.Member, error) {
//				panic("mock out the GetMemberByID method")
//			},
//			GetMemberIDByUsernameFunc: func(username string) (int, error) {
//				panic("mock out the GetMemberIDByUsername method")
//			},
//			SaveMemberFunc: func(member domain.Member) (int, error) {
//				panic("mock out the SaveMember method")
//			},
//		}
//
//		// use mockedMemberRepo in code that requires ports.MemberRepo
//		// and then make assertions.
//
//	}
type MemberRepoMock struct {
	// GetMemberByIDFunc mocks the GetMemberByID method.
	GetMemberByIDFunc func(id int) (*domain.Member, error)

	// GetMemberIDByUsernameFunc mocks the GetMemberIDByUsername method.
	GetMemberIDByUsernameFunc func(username string) (int, error)

	// SaveMemberFunc mocks the SaveMember method.
	SaveMemberFunc func(member domain.Member) (int, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetMemberByID holds details about calls to the GetMemberByID method.
		GetMemberByID []struct {
			// ID is the id argument value.
			ID int
		}
		// GetMemberIDByUsername holds details about calls to the GetMemberIDByUsername method.
		GetMemberIDByUsername []struct {
			// Username is the username argument value.
			Username string
		}
		// SaveMember holds details about calls to the SaveMember method.
		SaveMember []struct {
			// Member is the member argument value.
			Member domain.Member
		}
	}
	lockGetMemberByID         sync.RWMutex
	lockGetMemberIDByUsername sync.RWMutex
	lockSaveMember            sync.RWMutex
}

// GetMemberByID calls GetMemberByIDFunc.
func (mock *MemberRepoMock) GetMemberByID(id int) (*domain.Member, error) {
	if mock.GetMemberByIDFunc == nil {
		panic("MemberRepoMock.GetMemberByIDFunc: method is nil but MemberRepo.GetMemberByID was just called")
	}
	callInfo := struct {
		ID int
	}{
		ID: id,
	}
	mock.lockGetMemberByID.Lock()
	mock.calls.GetMemberByID = append(mock.calls.GetMemberByID, callInfo)
	mock.lockGetMemberByID.Unlock()
	return mock.GetMemberByIDFunc(id)
}

// GetMemberByIDCalls gets all the calls that were made to GetMemberByID.
// Check the length with:
//
//	len(mockedMemberRepo.GetMemberByIDCalls())
func (mock *MemberRepoMock) GetMemberByIDCalls() []struct {
	ID int
} {
	var calls []struct {
		ID int
	}
	mock.lockGetMemberByID.RLock()
	calls = mock.calls.GetMemberByID
	mock.lockGetMemberByID.RUnlock()
	return calls
}

// GetMemberIDByUsername calls GetMemberIDByUsernameFunc.
func (mock *MemberRepoMock) GetMemberIDByUsername(username string) (int, error) {
	if mock.GetMemberIDByUsernameFunc == nil {
		panic("MemberRepoMock.GetMemberIDByUsernameFunc: method is nil but MemberRepo.GetMemberIDByUsername was just called")
	}
	callInfo := struct {
		Username string
	}{
		Username: username,
	}
	mock.lockGetMemberIDByUsername.Lock()
	mock.calls.GetMemberIDByUsername = append(mock.calls.GetMemberIDByUsername, callInfo)
	mock.lockGetMemberIDByUsername.Unlock()
	return mock.GetMemberIDByUsernameFunc(username)
}

// GetMemberIDByUsernameCalls gets all the calls that were made to GetMemberIDByUsername.
// Check the length with:
//
//	len(mockedMemberRepo.GetMemberIDByUsernameCalls())
func (mock *MemberRepoMock) GetMemberIDByUsernameCalls() []struct {
	Username string
} {
	var calls []struct {
		Username string
	}
	mock.lockGetMemberIDByUsername.RLock()
	calls = mock.calls.GetMemberIDByUsername
	mock.lockGetMemberIDByUsername.RUnlock()
	return calls
}

// SaveMember calls SaveMemberFunc.
func (mock *MemberRepoMock) SaveMember(member domain.Member) (int, error) {
	if mock.SaveMemberFunc == nil {
		panic("MemberRepoMock.SaveMemberFunc: method is nil but MemberRepo.SaveMember was just called")
	}
	callInfo := struct {
		Member domain.Member
	}{
		Member: member,
	}
	mock.lockSaveMember.Lock()
	mock.calls.SaveMember = append(mock.calls.SaveMember, callInfo)
	mock.lockSaveMember.Unlock()
	return mock.SaveMemberFunc(member)
}

// SaveMemberCalls gets all the calls that were made to SaveMember.
// Check the length with:
//
//	len(mockedMemberRepo.SaveMemberCalls())
func (mock *MemberRepoMock) SaveMemberCalls() []struct {
	Member domain.Member
} {
	var calls []struct {
		Member domain.Member
	}
	mock.lockSaveMember.RLock()
	calls = mock.calls.SaveMember
	mock.lockSaveMember.RUnlock()
	return calls
}
