// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"goBoard/internal/core/domain"
	"goBoard/internal/core/ports"
	"sync"
)

// Ensure, that ThreadRepoMock does implement ports.ThreadRepo.
// If this is not the case, regenerate this file with moq.
var _ ports.ThreadRepo = &ThreadRepoMock{}

// ThreadRepoMock is a mock implementation of ports.ThreadRepo.
//
//	func TestSomethingThatUsesThreadRepo(t *testing.T) {
//
//		// make and configure a mocked ports.ThreadRepo
//		mockedThreadRepo := &ThreadRepoMock{
//			GetPostByIDFunc: func(id int) (*domain.ThreadPost, error) {
//				panic("mock out the GetPostByID method")
//			},
//			GetThreadByIDFunc: func(id int, memberID int) (*domain.Thread, error) {
//				panic("mock out the GetThreadByID method")
//			},
//			ListPostsCollapsibleFunc: func(ctx context.Context, toShow int, threadID int, memberID int) ([]domain.ThreadPost, int, error) {
//				panic("mock out the ListPostsCollapsible method")
//			},
//			ListPostsForThreadFunc: func(limit int, offset int, id int, memberID int) ([]domain.ThreadPost, error) {
//				panic("mock out the ListPostsForThread method")
//			},
//			ListThreadsFunc: func(ctx context.Context, cursors domain.Cursors, limit int, memberID int, filter domain.ThreadFilter) ([]domain.Thread, domain.Cursors, error) {
//				panic("mock out the ListThreads method")
//			},
//			SavePostFunc: func(post domain.ThreadPost) (int, error) {
//				panic("mock out the SavePost method")
//			},
//			SaveThreadFunc: func(thread domain.Thread) (int, error) {
//				panic("mock out the SaveThread method")
//			},
//			ToggleDotFunc: func(ctx context.Context, memberID int, threadID int) (bool, error) {
//				panic("mock out the ToggleDot method")
//			},
//			ToggleFavoriteFunc: func(ctx context.Context, memberID int, threadID int) (bool, error) {
//				panic("mock out the ToggleFavorite method")
//			},
//			ToggleIgnoreFunc: func(ctx context.Context, memberID int, threadID int) (bool, error) {
//				panic("mock out the ToggleIgnore method")
//			},
//			ViewThreadFunc: func(ctx context.Context, memberID int, threadID int) (int, error) {
//				panic("mock out the ViewThread method")
//			},
//		}
//
//		// use mockedThreadRepo in code that requires ports.ThreadRepo
//		// and then make assertions.
//
//	}
type ThreadRepoMock struct {
	// GetPostByIDFunc mocks the GetPostByID method.
	GetPostByIDFunc func(id int) (*domain.ThreadPost, error)

	// GetThreadByIDFunc mocks the GetThreadByID method.
	GetThreadByIDFunc func(id int, memberID int) (*domain.Thread, error)

	// ListPostsCollapsibleFunc mocks the ListPostsCollapsible method.
	ListPostsCollapsibleFunc func(ctx context.Context, toShow int, threadID int, memberID int) ([]domain.ThreadPost, int, error)

	// ListPostsForThreadFunc mocks the ListPostsForThread method.
	ListPostsForThreadFunc func(limit int, offset int, id int, memberID int) ([]domain.ThreadPost, error)

	// ListThreadsFunc mocks the ListThreads method.
	ListThreadsFunc func(ctx context.Context, cursors domain.Cursors, limit int, memberID int, filter domain.ThreadFilter) ([]domain.Thread, domain.Cursors, error)

	// SavePostFunc mocks the SavePost method.
	SavePostFunc func(post domain.ThreadPost) (int, error)

	// SaveThreadFunc mocks the SaveThread method.
	SaveThreadFunc func(thread domain.Thread) (int, error)

	// ToggleDotFunc mocks the ToggleDot method.
	ToggleDotFunc func(ctx context.Context, memberID int, threadID int) (bool, error)

	// ToggleFavoriteFunc mocks the ToggleFavorite method.
	ToggleFavoriteFunc func(ctx context.Context, memberID int, threadID int) (bool, error)

	// ToggleIgnoreFunc mocks the ToggleIgnore method.
	ToggleIgnoreFunc func(ctx context.Context, memberID int, threadID int) (bool, error)

	// ViewThreadFunc mocks the ViewThread method.
	ViewThreadFunc func(ctx context.Context, memberID int, threadID int) (int, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetPostByID holds details about calls to the GetPostByID method.
		GetPostByID []struct {
			// ID is the id argument value.
			ID int
		}
		// GetThreadByID holds details about calls to the GetThreadByID method.
		GetThreadByID []struct {
			// ID is the id argument value.
			ID int
			// MemberID is the memberID argument value.
			MemberID int
		}
		// ListPostsCollapsible holds details about calls to the ListPostsCollapsible method.
		ListPostsCollapsible []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ToShow is the toShow argument value.
			ToShow int
			// ThreadID is the threadID argument value.
			ThreadID int
			// MemberID is the memberID argument value.
			MemberID int
		}
		// ListPostsForThread holds details about calls to the ListPostsForThread method.
		ListPostsForThread []struct {
			// Limit is the limit argument value.
			Limit int
			// Offset is the offset argument value.
			Offset int
			// ID is the id argument value.
			ID int
			// MemberID is the memberID argument value.
			MemberID int
		}
		// ListThreads holds details about calls to the ListThreads method.
		ListThreads []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Cursors is the cursors argument value.
			Cursors domain.Cursors
			// Limit is the limit argument value.
			Limit int
			// MemberID is the memberID argument value.
			MemberID int
			// Filter is the filter argument value.
			Filter domain.ThreadFilter
		}
		// SavePost holds details about calls to the SavePost method.
		SavePost []struct {
			// Post is the post argument value.
			Post domain.ThreadPost
		}
		// SaveThread holds details about calls to the SaveThread method.
		SaveThread []struct {
			// Thread is the thread argument value.
			Thread domain.Thread
		}
		// ToggleDot holds details about calls to the ToggleDot method.
		ToggleDot []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MemberID is the memberID argument value.
			MemberID int
			// ThreadID is the threadID argument value.
			ThreadID int
		}
		// ToggleFavorite holds details about calls to the ToggleFavorite method.
		ToggleFavorite []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MemberID is the memberID argument value.
			MemberID int
			// ThreadID is the threadID argument value.
			ThreadID int
		}
		// ToggleIgnore holds details about calls to the ToggleIgnore method.
		ToggleIgnore []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MemberID is the memberID argument value.
			MemberID int
			// ThreadID is the threadID argument value.
			ThreadID int
		}
		// ViewThread holds details about calls to the ViewThread method.
		ViewThread []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MemberID is the memberID argument value.
			MemberID int
			// ThreadID is the threadID argument value.
			ThreadID int
		}
	}
	lockGetPostByID          sync.RWMutex
	lockGetThreadByID        sync.RWMutex
	lockListPostsCollapsible sync.RWMutex
	lockListPostsForThread   sync.RWMutex
	lockListThreads          sync.RWMutex
	lockSavePost             sync.RWMutex
	lockSaveThread           sync.RWMutex
	lockToggleDot            sync.RWMutex
	lockToggleFavorite       sync.RWMutex
	lockToggleIgnore         sync.RWMutex
	lockViewThread           sync.RWMutex
}

// GetPostByID calls GetPostByIDFunc.
func (mock *ThreadRepoMock) GetPostByID(id int) (*domain.ThreadPost, error) {
	if mock.GetPostByIDFunc == nil {
		panic("ThreadRepoMock.GetPostByIDFunc: method is nil but ThreadRepo.GetPostByID was just called")
	}
	callInfo := struct {
		ID int
	}{
		ID: id,
	}
	mock.lockGetPostByID.Lock()
	mock.calls.GetPostByID = append(mock.calls.GetPostByID, callInfo)
	mock.lockGetPostByID.Unlock()
	return mock.GetPostByIDFunc(id)
}

// GetPostByIDCalls gets all the calls that were made to GetPostByID.
// Check the length with:
//
//	len(mockedThreadRepo.GetPostByIDCalls())
func (mock *ThreadRepoMock) GetPostByIDCalls() []struct {
	ID int
} {
	var calls []struct {
		ID int
	}
	mock.lockGetPostByID.RLock()
	calls = mock.calls.GetPostByID
	mock.lockGetPostByID.RUnlock()
	return calls
}

// GetThreadByID calls GetThreadByIDFunc.
func (mock *ThreadRepoMock) GetThreadByID(id int, memberID int) (*domain.Thread, error) {
	if mock.GetThreadByIDFunc == nil {
		panic("ThreadRepoMock.GetThreadByIDFunc: method is nil but ThreadRepo.GetThreadByID was just called")
	}
	callInfo := struct {
		ID       int
		MemberID int
	}{
		ID:       id,
		MemberID: memberID,
	}
	mock.lockGetThreadByID.Lock()
	mock.calls.GetThreadByID = append(mock.calls.GetThreadByID, callInfo)
	mock.lockGetThreadByID.Unlock()
	return mock.GetThreadByIDFunc(id, memberID)
}

// GetThreadByIDCalls gets all the calls that were made to GetThreadByID.
// Check the length with:
//
//	len(mockedThreadRepo.GetThreadByIDCalls())
func (mock *ThreadRepoMock) GetThreadByIDCalls() []struct {
	ID       int
	MemberID int
} {
	var calls []struct {
		ID       int
		MemberID int
	}
	mock.lockGetThreadByID.RLock()
	calls = mock.calls.GetThreadByID
	mock.lockGetThreadByID.RUnlock()
	return calls
}

// ListPostsCollapsible calls ListPostsCollapsibleFunc.
func (mock *ThreadRepoMock) ListPostsCollapsible(ctx context.Context, toShow int, threadID int, memberID int) ([]domain.ThreadPost, int, error) {
	if mock.ListPostsCollapsibleFunc == nil {
		panic("ThreadRepoMock.ListPostsCollapsibleFunc: method is nil but ThreadRepo.ListPostsCollapsible was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		ToShow   int
		ThreadID int
		MemberID int
	}{
		Ctx:      ctx,
		ToShow:   toShow,
		ThreadID: threadID,
		MemberID: memberID,
	}
	mock.lockListPostsCollapsible.Lock()
	mock.calls.ListPostsCollapsible = append(mock.calls.ListPostsCollapsible, callInfo)
	mock.lockListPostsCollapsible.Unlock()
	return mock.ListPostsCollapsibleFunc(ctx, toShow, threadID, memberID)
}

// ListPostsCollapsibleCalls gets all the calls that were made to ListPostsCollapsible.
// Check the length with:
//
//	len(mockedThreadRepo.ListPostsCollapsibleCalls())
func (mock *ThreadRepoMock) ListPostsCollapsibleCalls() []struct {
	Ctx      context.Context
	ToShow   int
	ThreadID int
	MemberID int
} {
	var calls []struct {
		Ctx      context.Context
		ToShow   int
		ThreadID int
		MemberID int
	}
	mock.lockListPostsCollapsible.RLock()
	calls = mock.calls.ListPostsCollapsible
	mock.lockListPostsCollapsible.RUnlock()
	return calls
}

// ListPostsForThread calls ListPostsForThreadFunc.
func (mock *ThreadRepoMock) ListPostsForThread(limit int, offset int, id int, memberID int) ([]domain.ThreadPost, error) {
	if mock.ListPostsForThreadFunc == nil {
		panic("ThreadRepoMock.ListPostsForThreadFunc: method is nil but ThreadRepo.ListPostsForThread was just called")
	}
	callInfo := struct {
		Limit    int
		Offset   int
		ID       int
		MemberID int
	}{
		Limit:    limit,
		Offset:   offset,
		ID:       id,
		MemberID: memberID,
	}
	mock.lockListPostsForThread.Lock()
	mock.calls.ListPostsForThread = append(mock.calls.ListPostsForThread, callInfo)
	mock.lockListPostsForThread.Unlock()
	return mock.ListPostsForThreadFunc(limit, offset, id, memberID)
}

// ListPostsForThreadCalls gets all the calls that were made to ListPostsForThread.
// Check the length with:
//
//	len(mockedThreadRepo.ListPostsForThreadCalls())
func (mock *ThreadRepoMock) ListPostsForThreadCalls() []struct {
	Limit    int
	Offset   int
	ID       int
	MemberID int
} {
	var calls []struct {
		Limit    int
		Offset   int
		ID       int
		MemberID int
	}
	mock.lockListPostsForThread.RLock()
	calls = mock.calls.ListPostsForThread
	mock.lockListPostsForThread.RUnlock()
	return calls
}

// ListThreads calls ListThreadsFunc.
func (mock *ThreadRepoMock) ListThreads(ctx context.Context, cursors domain.Cursors, limit int, memberID int, filter domain.ThreadFilter) ([]domain.Thread, domain.Cursors, error) {
	if mock.ListThreadsFunc == nil {
		panic("ThreadRepoMock.ListThreadsFunc: method is nil but ThreadRepo.ListThreads was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Cursors  domain.Cursors
		Limit    int
		MemberID int
		Filter   domain.ThreadFilter
	}{
		Ctx:      ctx,
		Cursors:  cursors,
		Limit:    limit,
		MemberID: memberID,
		Filter:   filter,
	}
	mock.lockListThreads.Lock()
	mock.calls.ListThreads = append(mock.calls.ListThreads, callInfo)
	mock.lockListThreads.Unlock()
	return mock.ListThreadsFunc(ctx, cursors, limit, memberID, filter)
}

// ListThreadsCalls gets all the calls that were made to ListThreads.
// Check the length with:
//
//	len(mockedThreadRepo.ListThreadsCalls())
func (mock *ThreadRepoMock) ListThreadsCalls() []struct {
	Ctx      context.Context
	Cursors  domain.Cursors
	Limit    int
	MemberID int
	Filter   domain.ThreadFilter
} {
	var calls []struct {
		Ctx      context.Context
		Cursors  domain.Cursors
		Limit    int
		MemberID int
		Filter   domain.ThreadFilter
	}
	mock.lockListThreads.RLock()
	calls = mock.calls.ListThreads
	mock.lockListThreads.RUnlock()
	return calls
}

// SavePost calls SavePostFunc.
func (mock *ThreadRepoMock) SavePost(post domain.ThreadPost) (int, error) {
	if mock.SavePostFunc == nil {
		panic("ThreadRepoMock.SavePostFunc: method is nil but ThreadRepo.SavePost was just called")
	}
	callInfo := struct {
		Post domain.ThreadPost
	}{
		Post: post,
	}
	mock.lockSavePost.Lock()
	mock.calls.SavePost = append(mock.calls.SavePost, callInfo)
	mock.lockSavePost.Unlock()
	return mock.SavePostFunc(post)
}

// SavePostCalls gets all the calls that were made to SavePost.
// Check the length with:
//
//	len(mockedThreadRepo.SavePostCalls())
func (mock *ThreadRepoMock) SavePostCalls() []struct {
	Post domain.ThreadPost
} {
	var calls []struct {
		Post domain.ThreadPost
	}
	mock.lockSavePost.RLock()
	calls = mock.calls.SavePost
	mock.lockSavePost.RUnlock()
	return calls
}

// SaveThread calls SaveThreadFunc.
func (mock *ThreadRepoMock) SaveThread(thread domain.Thread) (int, error) {
	if mock.SaveThreadFunc == nil {
		panic("ThreadRepoMock.SaveThreadFunc: method is nil but ThreadRepo.SaveThread was just called")
	}
	callInfo := struct {
		Thread domain.Thread
	}{
		Thread: thread,
	}
	mock.lockSaveThread.Lock()
	mock.calls.SaveThread = append(mock.calls.SaveThread, callInfo)
	mock.lockSaveThread.Unlock()
	return mock.SaveThreadFunc(thread)
}

// SaveThreadCalls gets all the calls that were made to SaveThread.
// Check the length with:
//
//	len(mockedThreadRepo.SaveThreadCalls())
func (mock *ThreadRepoMock) SaveThreadCalls() []struct {
	Thread domain.Thread
} {
	var calls []struct {
		Thread domain.Thread
	}
	mock.lockSaveThread.RLock()
	calls = mock.calls.SaveThread
	mock.lockSaveThread.RUnlock()
	return calls
}

// ToggleDot calls ToggleDotFunc.
func (mock *ThreadRepoMock) ToggleDot(ctx context.Context, memberID int, threadID int) (bool, error) {
	if mock.ToggleDotFunc == nil {
		panic("ThreadRepoMock.ToggleDotFunc: method is nil but ThreadRepo.ToggleDot was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		MemberID int
		ThreadID int
	}{
		Ctx:      ctx,
		MemberID: memberID,
		ThreadID: threadID,
	}
	mock.lockToggleDot.Lock()
	mock.calls.ToggleDot = append(mock.calls.ToggleDot, callInfo)
	mock.lockToggleDot.Unlock()
	return mock.ToggleDotFunc(ctx, memberID, threadID)
}

// ToggleDotCalls gets all the calls that were made to ToggleDot.
// Check the length with:
//
//	len(mockedThreadRepo.ToggleDotCalls())
func (mock *ThreadRepoMock) ToggleDotCalls() []struct {
	Ctx      context.Context
	MemberID int
	ThreadID int
} {
	var calls []struct {
		Ctx      context.Context
		MemberID int
		ThreadID int
	}
	mock.lockToggleDot.RLock()
	calls = mock.calls.ToggleDot
	mock.lockToggleDot.RUnlock()
	return calls
}

// ToggleFavorite calls ToggleFavoriteFunc.
func (mock *ThreadRepoMock) ToggleFavorite(ctx context.Context, memberID int, threadID int) (bool, error) {
	if mock.ToggleFavoriteFunc == nil {
		panic("ThreadRepoMock.ToggleFavoriteFunc: method is nil but ThreadRepo.ToggleFavorite was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		MemberID int
		ThreadID int
	}{
		Ctx:      ctx,
		MemberID: memberID,
		ThreadID: threadID,
	}
	mock.lockToggleFavorite.Lock()
	mock.calls.ToggleFavorite = append(mock.calls.ToggleFavorite, callInfo)
	mock.lockToggleFavorite.Unlock()
	return mock.ToggleFavoriteFunc(ctx, memberID, threadID)
}

// ToggleFavoriteCalls gets all the calls that were made to ToggleFavorite.
// Check the length with:
//
//	len(mockedThreadRepo.ToggleFavoriteCalls())
func (mock *ThreadRepoMock) ToggleFavoriteCalls() []struct {
	Ctx      context.Context
	MemberID int
	ThreadID int
} {
	var calls []struct {
		Ctx      context.Context
		MemberID int
		ThreadID int
	}
	mock.lockToggleFavorite.RLock()
	calls = mock.calls.ToggleFavorite
	mock.lockToggleFavorite.RUnlock()
	return calls
}

// ToggleIgnore calls ToggleIgnoreFunc.
func (mock *ThreadRepoMock) ToggleIgnore(ctx context.Context, memberID int, threadID int) (bool, error) {
	if mock.ToggleIgnoreFunc == nil {
		panic("ThreadRepoMock.ToggleIgnoreFunc: method is nil but ThreadRepo.ToggleIgnore was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		MemberID int
		ThreadID int
	}{
		Ctx:      ctx,
		MemberID: memberID,
		ThreadID: threadID,
	}
	mock.lockToggleIgnore.Lock()
	mock.calls.ToggleIgnore = append(mock.calls.ToggleIgnore, callInfo)
	mock.lockToggleIgnore.Unlock()
	return mock.ToggleIgnoreFunc(ctx, memberID, threadID)
}

// ToggleIgnoreCalls gets all the calls that were made to ToggleIgnore.
// Check the length with:
//
//	len(mockedThreadRepo.ToggleIgnoreCalls())
func (mock *ThreadRepoMock) ToggleIgnoreCalls() []struct {
	Ctx      context.Context
	MemberID int
	ThreadID int
} {
	var calls []struct {
		Ctx      context.Context
		MemberID int
		ThreadID int
	}
	mock.lockToggleIgnore.RLock()
	calls = mock.calls.ToggleIgnore
	mock.lockToggleIgnore.RUnlock()
	return calls
}

// ViewThread calls ViewThreadFunc.
func (mock *ThreadRepoMock) ViewThread(ctx context.Context, memberID int, threadID int) (int, error) {
	if mock.ViewThreadFunc == nil {
		panic("ThreadRepoMock.ViewThreadFunc: method is nil but ThreadRepo.ViewThread was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		MemberID int
		ThreadID int
	}{
		Ctx:      ctx,
		MemberID: memberID,
		ThreadID: threadID,
	}
	mock.lockViewThread.Lock()
	mock.calls.ViewThread = append(mock.calls.ViewThread, callInfo)
	mock.lockViewThread.Unlock()
	return mock.ViewThreadFunc(ctx, memberID, threadID)
}

// ViewThreadCalls gets all the calls that were made to ViewThread.
// Check the length with:
//
//	len(mockedThreadRepo.ViewThreadCalls())
func (mock *ThreadRepoMock) ViewThreadCalls() []struct {
	Ctx      context.Context
	MemberID int
	ThreadID int
} {
	var calls []struct {
		Ctx      context.Context
		MemberID int
		ThreadID int
	}
	mock.lockViewThread.RLock()
	calls = mock.calls.ViewThread
	mock.lockViewThread.RUnlock()
	return calls
}
