// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"goBoard/internal/core/domain"
	"goBoard/internal/core/ports"
	"sync"
)

// Ensure, that ThreadRepoMock does implement ThreadRepo.
// If this is not the case, regenerate this file with moq.
var _ ports.ThreadRepo = &ThreadRepoMock{}

// ThreadRepoMock is a mock implementation of ThreadRepo.
//
//	func TestSomethingThatUsesThreadRepo(t *testing.T) {
//
//		// make and configure a mocked ThreadRepo
//		mockedThreadRepo := &ThreadRepoMock{
//			GetPostByIDFunc: func(id int) (*domain.Post, error) {
//				panic("mock out the GetPostByID method")
//			},
//			GetPostsByThreadIDFunc: func(threadID int) ([]domain.Post, error) {
//				panic("mock out the GetPostsByThreadID method")
//			},
//			GetThreadByIDFunc: func(id int) (*domain.Thread, error) {
//				panic("mock out the GetThreadByID method")
//			},
//			SavePostFunc: func(post domain.Post) (int, error) {
//				panic("mock out the SavePost method")
//			},
//		}
//
//		// use mockedThreadRepo in code that requires ThreadRepo
//		// and then make assertions.
//
//	}
type ThreadRepoMock struct {
	// GetPostByIDFunc mocks the GetPostByID method.
	GetPostByIDFunc func(id int) (*domain.Post, error)

	// GetPostsByThreadIDFunc mocks the GetPostsByThreadID method.
	GetPostsByThreadIDFunc func(threadID int) ([]domain.Post, error)

	// GetThreadByIDFunc mocks the GetThreadByID method.
	GetThreadByIDFunc func(id int) (*domain.Thread, error)

	// SavePostFunc mocks the SavePost method.
	SavePostFunc func(post domain.Post) (int, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetPostByID holds details about calls to the GetPostByID method.
		GetPostByID []struct {
			// ID is the id argument value.
			ID int
		}
		// GetPostsByThreadID holds details about calls to the GetPostsByThreadID method.
		GetPostsByThreadID []struct {
			// ThreadID is the threadID argument value.
			ThreadID int
		}
		// GetThreadByID holds details about calls to the GetThreadByID method.
		GetThreadByID []struct {
			// ID is the id argument value.
			ID int
		}
		// SavePost holds details about calls to the SavePost method.
		SavePost []struct {
			// Post is the post argument value.
			Post domain.Post
		}
	}
	lockGetPostByID        sync.RWMutex
	lockGetPostsByThreadID sync.RWMutex
	lockGetThreadByID      sync.RWMutex
	lockSavePost           sync.RWMutex
}

// GetPostByID calls GetPostByIDFunc.
func (mock *ThreadRepoMock) GetPostByID(id int) (*domain.Post, error) {
	if mock.GetPostByIDFunc == nil {
		panic("ThreadRepoMock.GetPostByIDFunc: method is nil but ThreadRepo.GetPostByID was just called")
	}
	callInfo := struct {
		ID int
	}{
		ID: id,
	}
	mock.lockGetPostByID.Lock()
	mock.calls.GetPostByID = append(mock.calls.GetPostByID, callInfo)
	mock.lockGetPostByID.Unlock()
	return mock.GetPostByIDFunc(id)
}

// GetPostByIDCalls gets all the calls that were made to GetPostByID.
// Check the length with:
//
//	len(mockedThreadRepo.GetPostByIDCalls())
func (mock *ThreadRepoMock) GetPostByIDCalls() []struct {
	ID int
} {
	var calls []struct {
		ID int
	}
	mock.lockGetPostByID.RLock()
	calls = mock.calls.GetPostByID
	mock.lockGetPostByID.RUnlock()
	return calls
}

// GetPostsByThreadID calls GetPostsByThreadIDFunc.
func (mock *ThreadRepoMock) GetPostsByThreadID(threadID int) ([]domain.Post, error) {
	if mock.GetPostsByThreadIDFunc == nil {
		panic("ThreadRepoMock.GetPostsByThreadIDFunc: method is nil but ThreadRepo.GetPostsByThreadID was just called")
	}
	callInfo := struct {
		ThreadID int
	}{
		ThreadID: threadID,
	}
	mock.lockGetPostsByThreadID.Lock()
	mock.calls.GetPostsByThreadID = append(mock.calls.GetPostsByThreadID, callInfo)
	mock.lockGetPostsByThreadID.Unlock()
	return mock.GetPostsByThreadIDFunc(threadID)
}

// GetPostsByThreadIDCalls gets all the calls that were made to GetPostsByThreadID.
// Check the length with:
//
//	len(mockedThreadRepo.GetPostsByThreadIDCalls())
func (mock *ThreadRepoMock) GetPostsByThreadIDCalls() []struct {
	ThreadID int
} {
	var calls []struct {
		ThreadID int
	}
	mock.lockGetPostsByThreadID.RLock()
	calls = mock.calls.GetPostsByThreadID
	mock.lockGetPostsByThreadID.RUnlock()
	return calls
}

// GetThreadByID calls GetThreadByIDFunc.
func (mock *ThreadRepoMock) GetThreadByID(id int) (*domain.Thread, error) {
	if mock.GetThreadByIDFunc == nil {
		panic("ThreadRepoMock.GetThreadByIDFunc: method is nil but ThreadRepo.GetThreadByID was just called")
	}
	callInfo := struct {
		ID int
	}{
		ID: id,
	}
	mock.lockGetThreadByID.Lock()
	mock.calls.GetThreadByID = append(mock.calls.GetThreadByID, callInfo)
	mock.lockGetThreadByID.Unlock()
	return mock.GetThreadByIDFunc(id)
}

// GetThreadByIDCalls gets all the calls that were made to GetThreadByID.
// Check the length with:
//
//	len(mockedThreadRepo.GetThreadByIDCalls())
func (mock *ThreadRepoMock) GetThreadByIDCalls() []struct {
	ID int
} {
	var calls []struct {
		ID int
	}
	mock.lockGetThreadByID.RLock()
	calls = mock.calls.GetThreadByID
	mock.lockGetThreadByID.RUnlock()
	return calls
}

// SavePost calls SavePostFunc.
func (mock *ThreadRepoMock) SavePost(post domain.Post) (int, error) {
	if mock.SavePostFunc == nil {
		panic("ThreadRepoMock.SavePostFunc: method is nil but ThreadRepo.SavePost was just called")
	}
	callInfo := struct {
		Post domain.Post
	}{
		Post: post,
	}
	mock.lockSavePost.Lock()
	mock.calls.SavePost = append(mock.calls.SavePost, callInfo)
	mock.lockSavePost.Unlock()
	return mock.SavePostFunc(post)
}

// SavePostCalls gets all the calls that were made to SavePost.
// Check the length with:
//
//	len(mockedThreadRepo.SavePostCalls())
func (mock *ThreadRepoMock) SavePostCalls() []struct {
	Post domain.Post
} {
	var calls []struct {
		Post domain.Post
	}
	mock.lockSavePost.RLock()
	calls = mock.calls.SavePost
	mock.lockSavePost.RUnlock()
	return calls
}
