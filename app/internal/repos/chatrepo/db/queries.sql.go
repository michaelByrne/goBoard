// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: queries.sql

package db

import (
	"context"
	"database/sql"
)

const getChatGroupsForMember = `-- name: GetChatGroupsForMember :many
SELECT cg.id, cg.topic
FROM chat_group cg
JOIN chat_group_member cgm ON cg.id = cgm.group_id
WHERE member_id = $1
`

func (q *Queries) GetChatGroupsForMember(ctx context.Context, memberID int32) ([]ChatGroup, error) {
	rows, err := q.db.Query(ctx, getChatGroupsForMember, memberID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ChatGroup
	for rows.Next() {
		var i ChatGroup
		if err := rows.Scan(&i.ID, &i.Topic); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getChatsForGroup = `-- name: GetChatsForGroup :many
SELECT c.id, c.member_id, c.stamp, c.chat
FROM chat c
WHERE c.chat_group = $1
`

type GetChatsForGroupRow struct {
	ID       int32
	MemberID int32
	Stamp    sql.NullTime
	Chat     sql.NullString
}

func (q *Queries) GetChatsForGroup(ctx context.Context, chatGroup sql.NullInt32) ([]GetChatsForGroupRow, error) {
	rows, err := q.db.Query(ctx, getChatsForGroup, chatGroup)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetChatsForGroupRow
	for rows.Next() {
		var i GetChatsForGroupRow
		if err := rows.Scan(
			&i.ID,
			&i.MemberID,
			&i.Stamp,
			&i.Chat,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertChat = `-- name: InsertChat :one
INSERT INTO chat (member_id, chat, chat_group)
VALUES ($1, $2, $3)
RETURNING id, member_id, stamp, chat, chat_group
`

type InsertChatParams struct {
	MemberID  int32
	Chat      sql.NullString
	ChatGroup sql.NullInt32
}

func (q *Queries) InsertChat(ctx context.Context, arg InsertChatParams) (Chat, error) {
	row := q.db.QueryRow(ctx, insertChat, arg.MemberID, arg.Chat, arg.ChatGroup)
	var i Chat
	err := row.Scan(
		&i.ID,
		&i.MemberID,
		&i.Stamp,
		&i.Chat,
		&i.ChatGroup,
	)
	return i, err
}

const insertChatGroup = `-- name: InsertChatGroup :one
INSERT INTO chat_group (topic)
VALUES ($1)
RETURNING id, topic
`

func (q *Queries) InsertChatGroup(ctx context.Context, topic sql.NullString) (ChatGroup, error) {
	row := q.db.QueryRow(ctx, insertChatGroup, topic)
	var i ChatGroup
	err := row.Scan(&i.ID, &i.Topic)
	return i, err
}

const insertChatGroupMember = `-- name: InsertChatGroupMember :one
INSERT INTO chat_group_member (group_id, member_id)
VALUES ($1, $2)
RETURNING group_id, member_id
`

type InsertChatGroupMemberParams struct {
	GroupID  int32
	MemberID int32
}

func (q *Queries) InsertChatGroupMember(ctx context.Context, arg InsertChatGroupMemberParams) (ChatGroupMember, error) {
	row := q.db.QueryRow(ctx, insertChatGroupMember, arg.GroupID, arg.MemberID)
	var i ChatGroupMember
	err := row.Scan(&i.GroupID, &i.MemberID)
	return i, err
}
