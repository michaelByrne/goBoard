// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"goBoard/internal/core/domain"
	"goBoard/internal/core/ports"
	"sync"
)

// Ensure, that AuthenticationRepoMock does implement ports.AuthenticationRepo.
// If this is not the case, regenerate this file with moq.
var _ ports.AuthenticationRepo = &AuthenticationRepoMock{}

// AuthenticationRepoMock is a mock implementation of ports.AuthenticationRepo.
//
//	func TestSomethingThatUsesAuthenticationRepo(t *testing.T) {
//
//		// make and configure a mocked ports.AuthenticationRepo
//		mockedAuthenticationRepo := &AuthenticationRepoMock{
//			AuthenticateFunc: func(ctx context.Context, username string, password string) (*domain.Token, error) {
//				panic("mock out the Authenticate method")
//			},
//		}
//
//		// use mockedAuthenticationRepo in code that requires ports.AuthenticationRepo
//		// and then make assertions.
//
//	}
type AuthenticationRepoMock struct {
	// AuthenticateFunc mocks the Authenticate method.
	AuthenticateFunc func(ctx context.Context, username string, password string) (*domain.Token, error)

	// calls tracks calls to the methods.
	calls struct {
		// Authenticate holds details about calls to the Authenticate method.
		Authenticate []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Username is the username argument value.
			Username string
			// Password is the password argument value.
			Password string
		}
	}
	lockAuthenticate sync.RWMutex
}

// Authenticate calls AuthenticateFunc.
func (mock *AuthenticationRepoMock) Authenticate(ctx context.Context, username string, password string) (*domain.Token, error) {
	if mock.AuthenticateFunc == nil {
		panic("AuthenticationRepoMock.AuthenticateFunc: method is nil but AuthenticationRepo.Authenticate was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Username string
		Password string
	}{
		Ctx:      ctx,
		Username: username,
		Password: password,
	}
	mock.lockAuthenticate.Lock()
	mock.calls.Authenticate = append(mock.calls.Authenticate, callInfo)
	mock.lockAuthenticate.Unlock()
	return mock.AuthenticateFunc(ctx, username, password)
}

// AuthenticateCalls gets all the calls that were made to Authenticate.
// Check the length with:
//
//	len(mockedAuthenticationRepo.AuthenticateCalls())
func (mock *AuthenticationRepoMock) AuthenticateCalls() []struct {
	Ctx      context.Context
	Username string
	Password string
} {
	var calls []struct {
		Ctx      context.Context
		Username string
		Password string
	}
	mock.lockAuthenticate.RLock()
	calls = mock.calls.Authenticate
	mock.lockAuthenticate.RUnlock()
	return calls
}
